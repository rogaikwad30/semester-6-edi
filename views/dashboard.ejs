<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/navbar.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"
        integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header class="header" id="header">
        <nav class="navbar container">
            <a href="/" class="brand">EDI Vibrational Analyzer Group-2</a>
            <div class="burger" id="burger">
                <span class="burger-line"></span>
                <span class="burger-line"></span>
                <span class="burger-line"></span>
            </div>
            <span class="overlay"></span>
            <div class="menu" id="menu">
                <ul class="menu-inner">
                    <li class="menu-item"><a class="menu-link" href="#">Home</a></li>
                    <li class="menu-item"><a class="menu-link" href="#">Profile</a></li>
                    <li class="menu-item"><a class="menu-link" href="#">Pricing</a></li>
                    <li class="menu-item"><a class="menu-link" href="#">Project</a></li>
                    <li class="menu-item"><a class="menu-link" href="#">Contact</a></li>
                </ul>
            </div>
            <button><i class="fa fa-search search-toggle"></i></button>
            <form class="search-block">
                <span><i class="fa fa-arrow-back search-cancel"></i></span>
                <input type="search" name="search" class="search-input" placeholder="Search here..." autofocus>
            </form>
        </nav>
    </header>
    <section class="charts">
        <div class="item">
            <section class="graph">
                <canvas id="chart"> </canvas>
            </section>

            <section class="config">
                <form action="">
                    <h6 class="text-center p-3">
                        Ideal Live Time Vibrational Analysis
                    </h6>
                </form>
            </section>
        </div>
        <div class="item">
            <section class="graph">
                <canvas id="chart2"> </canvas>
            </section>
            <section id="loader2" style="position: relative;"> 
                <div class="opposites" style="position: absolute;
                top: 50%; bottom: 50%; transform: translate(-50%,-50%);">
                    <div class="opposites bl"></div>
                    <div class="opposites tr"></div>
                    <div class="opposites br"></div>
                    <div class="opposites tl"></div>
                </div>    
            </section>
        </div>
    </section>
    <section class="charts my-5 py-3">
        
        <div class="item" style="width: 700px; margin-right: 190px ;">
            <section class="graph">
                <canvas id="chart4"> </canvas>
            </section>
            <h6 class="text-center my-5">Comparitive Study On X vs Y accleration</h6>
        </div>

        <div class="item pie1">
            <section class="graph">
                <canvas id="pieChart1"> </canvas>
            </section>

            <section class="config my-3">
                <div>
                    <p class="d-block w-100">Select GroupBy Column</p>
                    <select class="d-block w-100" name="groupby" id="groupby"> 
                        <option value=""  >Default</option>
                        <option value="LogTime"  >Logtime</option>
                        <option value="LogTime"  >Type-1</option>
                    </select>

                    <p class="d-block w-100">Select Column</p>
                    <select class="d-block w-100" name="column" id="column">
                        <option value="x" selected>X</option>
                        <option value="y">Y</option>
                        <option value="z">z</option>
                        <option value="value">Value</option>
                    </select>

                    <p class="d-block w-100">Select Aggregator</p>
                    <select class="d-block w-100" name="aggr" id="aggr">
                        <option value="avg" selected>avg</option>
                        <option value="sum">sum</option>
                        <option value="max">max</option>
                        <option value="min">min</option>
                        <option value="avg">first</option>
                        <option value="avg">last</option>
                        <option value="avg">count</option>
                    </select>

                    <br>
                    <button id="proceed" class="btn btn-success w-100 text-center">Proceed</button>
                </div>
            </section>
        </div>
 

    </section>
</body>
<script src="/public/js/navbar.js"></script>

<script>
    // First Ideal Data Chart
    var ctx = document.getElementById("chart");
    var strDataX = '<%- JSON.stringify(liveDataX) %>'
    var parseDataX = JSON.parse(strDataX)

    var strDataY = '<%- JSON.stringify(liveDataY) %>'
    var parseDataY = JSON.parse(strDataY)

    let labels = []
    let valuesX = [], valuesY = [];
    for (let i in parseDataX) {
        labels.push(i.split("GMT")[0])
        valuesX.push(parseDataX[i])
        valuesY.push(parseDataY[i])
    }

    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [

                {
                    label: '# Vibrational Frequency - Y',
                    data: valuesY,
                    backgroundColor: ['rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],

                    borderColor: [

                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                    ],
                    borderWidth: 1
                },

                {
                    label: '# Vibrational Frequency - X',
                    data: valuesX,
                    backgroundColor: ['rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],

                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                },
            ]
        },
        options: {
            elements: {
                point: {
                    radius: 0
                }
            },
            tension: 0.3,
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                    }
                }]
            }
        }
    });
</script>

<script>
    let loader2 = document.getElementById("loader2")
    var ctx2 = document.getElementById("chart2");
    let labels2 = [1,2,3]
    let values2 = [1,23,3]
    setInterval(()=>{
        // console.log("Fetching Live Data")
        loader2.style.display = "block";
        fetch('/live-line-chart-data')
        .then(response => response.json())
        .then(data => {
            // console.log("Response is : ",data)
            data = data["liveData"]
            var ctx2 = document.getElementById("chart2");
            loader2.style.display = "none";
            var myChart2 = new Chart(ctx2, {
            type: 'line',
            data: {
                labels: data['labels'],
                datasets: [
                    {
                        label: '# Frequency',
                        data: data['valuesX'],
                        backgroundColor: ['rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],

                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    },
                    {
                        label: '# Frequency - Y',
                        data: data['valuesY'],
                        backgroundColor: ['rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],

                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    });

    }, 15000)
</script>

<script>
    var pieChart1 = document.getElementById("pieChart1");
    var pie1 = new Chart(pieChart1,{})
    let getPieData = ()=>{
     
    
    let configPie1 = {
      "groupby" : document.getElementById("groupby").value || "",
      "column" : document.getElementById("column").value || "x",
      "aggr" :  document.getElementById("aggr").value || "first",
    } 

    console.log("Pie Chart Req Body : " , configPie1)

    fetch('/ideal-pie-chart-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(configPie1),
    })
    .then(response => response.json())
    .then(data => {
        pie1.destroy() 
        pie1 = new Chart(pieChart1, {
        type: 'doughnut',
        data: {
            labels: data["labels"],
            datasets: [
                {
                    label: '# Columb',
                    data: data["values"],
                    backgroundColor: ['rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                    ],

                    borderColor: [
                        'rgba(255,99,132,1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
  
    })
    .catch((error) => {
        console.error('Error:', error);
    });
    }


    document.getElementById("proceed").addEventListener("click", ()=>{
        console.log("Proceed Clicked")
        getPieData()
    })

    getPieData()
    
    
</script>

<script> 
        fetch('/live-bar-chart-data')
        .then(response => response.json())
        .then(data => { 
            data = data["liveData"]
            var ctx4 = document.getElementById("chart4"); 
            var myChart4 = new Chart(ctx4, {
            type: 'bar',
            data: {
                labels: data['labels'],
                datasets: [
                    {
                        label: '# Frequency',
                        data: data['valuesX'],
                        backgroundColor: ['rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],

                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    },
                    {
                        label: '# Frequency - Y',
                        data: data['valuesY'],
                        backgroundColor: ['rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],

                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    });
 
 
</script>
 

</html>
